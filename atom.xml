<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Welcome to imfht.github.io!]]></title>
  <link href="https://imfht.github.io/atom.xml" rel="self"/>
  <link href="https://imfht.github.io/"/>
  <updated>2019-04-24T20:29:11+08:00</updated>
  <id>https://imfht.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.coderforart.com/">CoderForArt</generator>

  
  <entry>
    <title type="html"><![CDATA[Spark 与 ElasticSearch 实战 - 使用 Spark处理 Rapid7的HTTP 数据并使用 ES 做索引]]></title>
    <link href="https://imfht.github.io/15561079808576.html"/>
    <updated>2019-04-24T20:13:00+08:00</updated>
    <id>https://imfht.github.io/15561079808576.html</id>
    <content type="html"><![CDATA[
<p>Rapid7提供了全网常见端口的 HTTP 数据，数据的地址可以在<a href="https://opendata.rapid7.com/sonar.tcp/">https://opendata.rapid7.com/sonar.tcp/</a>中被找到，数据的格式如下所示：</p>

<pre><code class="language-json">{&quot;data&quot;:&quot;SFRUUC8xLjEgNDA0IE5vdCBGb3VuZA0KU0VSVkVSOiBMaW51eC8yLjQuMzAsIFVQblAvMS4wLCBQb3J0YWJsZSBTREsgZm9yIFVQblAgZGV2aWNlcy8xLjMuMQ0KQ09OTkVDVElPTjogY2xvc2UNCkNPTlRFTlQtTEVOR1RIOiA0OA0KQ09OVEVOVC1UWVBFOiB0ZXh0L2h0bWwNCg0KPGh0bWw+PGJvZHk+PGgxPjQwNCBOb3QgRm91bmQ8L2gxPjwvYm9keT48L2h0bWw+&quot;,&quot;host&quot;:&quot;5.12.214.213&quot;,&quot;ip&quot;:&quot;5.12.214.213&quot;,&quot;path&quot;:&quot;/&quot;,&quot;port&quot;:49153,&quot;vhost&quot;:&quot;5.12.214.213&quot;}
</code></pre>

<p>其中 data 数据为 base64加密之后的HTTP 完整报文（包含 HTTP header 和 body）。<br/>
我们先写一个简单的脚本来解析这行数据：</p>

<pre><code class="language-python">linend = re.compile(r&#39;\r\n\r\n&#39;)
title_regex = re.compile(&quot;&lt;title&gt;(.*?)&lt;/title&gt;&quot;, re.I | re.M)
has_gzip_regex = re.compile(r&#39;Content-Encoding: gzip&#39;, re.I)

def get_page(page_json):
    &quot;&quot;&quot;
    给一个json 返回一个page对象
    &quot;&quot;&quot;
    index = page_json[&#39;data&#39;].find(b&#39;\r\n\r\n&#39;)
    header = page_json[&#39;data&#39;][:index].decode(errors=&#39;ignore&#39;)
    body = page_json[&#39;data&#39;][index + 4:]
    server = re.findall(server_regex, header)
    if server:
        server = server[0].strip()
    else:
        server = &quot;&quot;
    if has_gzip_regex.findall(header):
        try:
            body = gzip.decompress(body)
        except Exception as e:
            pass
    encoding = get_charset(header, body)
    if encoding:
        try:
            body = body.decode(encoding)
        except:  # 一些奇怪的编码问题，不管了
            body = body.decode(errors=&#39;ignore&#39;)
            pass
    else:
        body = body.decode(errors=&#39;ignore&#39;)
    _ = re.findall(title_regex, body)

    title = _[0] if _ else &quot;&quot;
    print header, body, title
</code></pre>

<p>加入 spark 之后一个完整的脚本如下（略去了相关依赖库）。</p>

<pre><code class="language-python">import base64
import gzip
import json
import os
import re
import sys
from functools import reduce

import geoip2.database
import pyspark
from numpy import long

linend = re.compile(r&#39;\r\n\r\n&#39;)
title_regex = re.compile(&quot;&lt;title&gt;(.*?)&lt;/title&gt;&quot;, re.I | re.M)
has_gzip_regex = re.compile(r&#39;Content-Encoding: gzip&#39;, re.I)

from Util import Util, Page

ip2int = lambda ip: reduce(lambda a, b: long(a) * 256 + long(b), ip.split(&#39;.&#39;))

os.environ[
    &#39;PYSPARK_SUBMIT_ARGS&#39;] = &#39;--jars ./elasticsearch-hadoop-6.7.0/dist/elasticsearch-spark-20_2.11-6.7.0.jar pyspark-shell&#39;

def get_charset(header, html):
    try:
        m = re.search(b&#39;&lt;meta.*?charset=(.*?)&quot;(&gt;| |/)&#39;, html, flags=re.I)
        if m:
            return m.group(1).decode().replace(&#39;&quot;&#39;, &#39;&#39;)
    except Exception as e:
        pass
    try:
        if &#39;Content-Type&#39; in header:
            m = re.search(r&#39;.*?charset=(.*?)(;|$)&#39;, header, flags=re.I)
            if m:
                return m.group(1)
    except Exception as e:
        pass

server_regex = re.compile(&quot;server:(.*?)\r\n&quot;,re.I)
def get_page(page_json):
    &quot;&quot;&quot;
    给一个json 返回一个page对象
    &quot;&quot;&quot;
    index = page_json[&#39;data&#39;].find(b&#39;\r\n\r\n&#39;)
    header = page_json[&#39;data&#39;][:index].decode(errors=&#39;ignore&#39;)
    body = page_json[&#39;data&#39;][index + 4:]
    server = re.findall(server_regex, header)
    if server:
        server = server[0].strip()
    else:
        server = &quot;&quot;
    if has_gzip_regex.findall(header):
        try:
            body = gzip.decompress(body)
        except Exception as e:
            pass
    encoding = get_charset(header, body)
    if encoding:
        try:
            body = body.decode(encoding)
        except:  # 一些奇怪的编码问题，不管了
            body = body.decode(errors=&#39;ignore&#39;)
            pass
    else:
        body = body.decode(errors=&#39;ignore&#39;)
    _ = re.findall(title_regex, body)

    title = _[0] if _ else &quot;&quot;
    page = Page(title=title, body=body, ip=page_json[&#39;vhost&#39;], port=page_json[&#39;port&#39;], header=header,server=server)
    return page


ip2int = lambda ip: reduce(lambda a, b: long(a) * 256 + long(b), ip.split(&#39;.&#39;))


def parse_line(line_json):
    reader = geoip2.database.Reader(&#39;./GeoLite2-ASN.mmdb&#39;)
    data = base64.b64decode(line_json[&#39;data&#39;])
    line_json[&#39;data&#39;] = data
    page = get_page(line_json)
    ip_int = ip2int(line_json[&#39;vhost&#39;])
    ip_info = Util.get_ip_info(line_json[&#39;vhost&#39;])
    line_json[&#39;ip_int&#39;] = ip_int
    try:
        line_json[&#39;location&#39;] = &#39;%.2f,%.2f&#39; % (float(ip_info[&#39;latitude&#39;]), float(ip_info[&#39;longitude&#39;]))
    except:
        pass # no location
    try:
        asn = reader.asn(line_json[&#39;ip&#39;])
        line_json[&#39;asn_info&#39;] = {&quot;asn&quot;: asn.autonomous_system_number, &#39;asn_org&#39;: asn.autonomous_system_organization}
    except:
        pass
    if page.server:
        line_json[&#39;server&#39;] = page.server
    line_json[&#39;title&#39;] = page.title
    line_json[&#39;body&#39;] = page.body
    line_json[&#39;header&#39;] = page.header
    line_json[&#39;doc_id&#39;] = &#39;%s-%s-%s&#39;%(line_json[&#39;ip&#39;], line_json[&#39;port&#39;], &quot;http&quot;)
    line_json.pop(&#39;path&#39;)
    line_json.pop(&#39;vhost&#39;)
    line_json.pop(&#39;data&#39;)
    line_json.pop(&#39;host&#39;)
    return line_json


import hashlib


def get_md5(ip, port):
    return hashlib.md5((&#39;%s%d&#39; % (ip, port)).encode()).hexdigest()


def main():
    pyspark.SparkContext.setSystemProperty(&#39;spark.executor.memory&#39;, &#39;28g&#39;)
    conf = pyspark.SparkConf().setMaster(&quot;local[*]&quot;).setAppName(&quot;Streamer&quot;)
    conf.set(&#39;spark.executor.cores&#39;, 64)
    conf.set(&quot;spark.executor.memory&quot;, &#39;32g&#39;)
    es_write_conf = {
        # specify the node that we are sending data to (this should be the master)
        &quot;es.nodes&quot;: &#39;http://127.0.0.1:9200&#39;,
        # specify the port in case it is not the default port
        &#39;es.net.http.auth.user&#39;: &#39;&#39;,
        &#39;es.net.http.auth.pass&#39;: &#39;&#39;,
        # &quot;es.port&quot;: &#39;9243&#39;,
        # &#39;es.net.ssl&#39;: &#39;true&#39;,
        # specify a resource in the form &#39;index/doc-type&#39;
        &quot;es.resource&quot;: &#39;http_test/_doc&#39;,
        # is the input JSON?
        &#39;es.nodes.wan.only&#39;: &#39;true&#39;,
        &#39;es.nodes.discovery&#39;: &#39;false&#39;,
        &quot;es.input.json&quot;: &quot;yes&quot;,
        # is there a field in the mapping that should be used to specify the ES document ID
        &quot;es.mapping.id&quot;: &quot;doc_id&quot;
    }
    with pyspark.SparkContext(&quot;local[*]&quot;, &quot;PySparkWordCount&quot;, conf=conf) as sc:
        # Get a RDD containing lines from this script file
        text_rdd = sc.textFile(sys.argv[1], 10)
        json_rdd = text_rdd.map(json.loads)
        result = json_rdd.map(parse_line)
        result = result.map(lambda x: (x[&#39;doc_id&#39;], json.dumps(x, ensure_ascii=False)))
        # print(result.take(10))
        result.saveAsNewAPIHadoopFile(
            path=&#39;-&#39;,
            outputFormatClass=&quot;org.elasticsearch.hadoop.mr.EsOutputFormat&quot;,
            keyClass=&quot;org.apache.hadoop.io.NullWritable&quot;,
            valueClass=&quot;org.elasticsearch.hadoop.mr.LinkedMapWritable&quot;,
            # critically, we must specify our `es_write_conf`
            conf=es_write_conf)


if __name__ == &#39;__main__&#39;:
    main()
</code></pre>

<p>以上脚本演示了如何使用 pyspark 来读取一个文件，对每一行进行(并行)处理之后将结果写入到 ES 中。</p>

<h2 id="toc_0">其他</h2>

<p>处理 Rapid7的数据有以下几个注意事项：<br/>
1. 对于header中存在 gzip 的HTTP报文，需要使用 gzip 解码 body 中的内容<br/>
2. 可以从 header 的 Content-Type，body 的 charset 字段中找到编码信息</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TravisCi与 Gitbook 实战：使用 TravisCi自动编译Gitbook文档并发布 Release]]></title>
    <link href="https://imfht.github.io/15518370394099.html"/>
    <updated>2019-03-06T09:50:39+08:00</updated>
    <id>https://imfht.github.io/15518370394099.html</id>
    <content type="html"><![CDATA[
<p>最近有一个项目需要编写比较多的 Markdown 文档，于是使用 Gitbook来完成这个事情，并使用 github 进行版本管理。这篇文章实现了当新的 Markdown 文档被推送到 github 时TravisCi自动发起构建，构建完成之后发布一个PDF release。</p>

<h2 id="toc_0">什么是 Gitbook</h2>

<blockquote>
<p>GitBook 是一个基于Node.js 的命令行工具，可使用Github/Git 和Markdown 来制作精美的电子书。<br/>
- 百度百科</p>
</blockquote>

<h2 id="toc_1">什么是 TravisCi</h2>

<blockquote>
<p>Travis CI是在软件开发领域中的一个在线的，分布式的持续集成服务，用来构建及测试在GitHub托管的代码。这个软件的代码同时也是开源的，可以在GitHub上下载到，尽管开发者当前并不推荐在闭源项目中单独使用它。<br/>
 - 维基百科</p>
</blockquote>

<h2 id="toc_2">实战</h2>

<p>在项目的根目录添加如下的 <code>.travis.yml</code> 文件，在 Travis.yml设置自动 build即可。</p>

<pre><code>language: node_js

node_js:
  - &quot;9&quot;

# 缓存依赖
cache:
  directories:
    - $HOME/.npm

before_install:
  - export TZ=&#39;Asia/Shanghai&#39; # 更改时区
  - sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 6B05F25D762E3157
  - sudo apt update -qq
  - sudo apt-get install calibre xvfb -y
  - sudo apt-get install ttf-wqy-*
  - echo &#39;#!/bin/bash&#39; | sudo tee -a /usr/local/bin/ebook-convert
  - echo &#39;Run xvfb-run /usr/bin/ebook-convert $@&#39; | sudo tee -a /usr/local/bin/ebook-convert
  - echo &#39;xvfb-run /usr/bin/ebook-convert &quot;$@&quot;&#39; | sudo tee -a /usr/local/bin/ebook-convert
  - sudo chmod +x /usr/local/bin/ebook-convert

# 依赖安装
install:
  - npm install gitbook-cli -g
  # 安装 gitbook 插件
  - gitbook install

# 构建脚本
script:
    # 自定义输出目录 gitbook build src dest
  - gitbook pdf ./ ./book.pdf

# 分支白名单
branches:
  only:
    - master # 只对 master 分支进行构建

# GitHub Pages 部署
deploy:
  provider: releases
  skip_cleanup: true
  api_key: $CI_USER_TOKEN
  file:
     - book.pdf

</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacOS 软件破解实战：无限试用图床软件 iPic]]></title>
    <link href="https://imfht.github.io/15517711892880.html"/>
    <updated>2019-03-05T15:33:09+08:00</updated>
    <id>https://imfht.github.io/15517711892880.html</id>
    <content type="html"><![CDATA[
<p>在使用 Typora 时发现这个编辑器可以使用 iPic 上传图片。下载之后发现这个软件是订阅制的，需要 ￥60/年。<br/>
iPic确实是一款很好用的软件，支持的图床种类也有很多，但是作为一个几乎是0运营成本的软件我不能接受订阅制这个东西。</p>

<h2 id="toc_0">无限试用</h2>

<p>默认 iPic 支持试用7天无限制图床，试用采取的是本地验证。试用开启时间存储在</p>

<pre><code>/Users/yourname/Library/Containers/net.toolinbox.ipic/Data/Library/SyncedPreferences/net.toolinbox.ipic.plist
</code></pre>

<p>将 <code>values</code> -&gt; <code>Markdown</code> -&gt; <code>value</code> 更换为七天之内的时间戳即可实现无限试用。<br/>
<img src="https://img.fiht.me/ipic/2019-03-05-074055.png" alt=""/></p>

<h2 id="toc_1">写一个小脚本</h2>

<p>一个方便的做法是在启动 iPic 前将这个试用时间调到一个最近的时间。但将 <code>/Applications/iPic.app/Contents/MacOS/iPic</code>改为启动脚本会出现一些签名的奇怪问题。<br/>
所以我的解决方法是 </p>

<pre><code>mkdir -p /Applications/cipc.app/MacOS/
</code></pre>

<p>在 <code>/Applications/cipc.app/MacOS/cipc</code> 中填入如下内容</p>

<pre><code class="language-bash">!/bin/bash
/usr/libexec/PlistBuddy -c &quot;Set &#39;:values:Markdown Flag:value&#39; `date +%s`&quot; /Users/`whoami`/Library/Containers/net.toolinbox.ipic/Data/Library/SyncedPreferences/net.toolinbox.ipic.plist &amp;&amp; nohup /Applications/iPic.app/Contents/MacOS/iPic &amp;
</code></pre>

<p>别忘了添加可执行权限 <code>chmod +x /Applications/cipc.app/MacOS/cipc</code>，<br/>
然后运行cipc即可实现对 iPic 的无限试用。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[批量注册实战：使用Appium 和安卓虚拟机完成 Telegram 批量注册]]></title>
    <link href="https://imfht.github.io/15508224108794.html"/>
    <updated>2019-02-22T16:00:10+08:00</updated>
    <id>https://imfht.github.io/15508224108794.html</id>
    <content type="html"><![CDATA[
<p>测试了一下使用 Python 操作 Telegram。记录一下大致过程供备忘。</p>

<h2 id="toc_0">0x01 安装 Genymotion与VirtualBox</h2>

<p>Genymotion是一款非常好用的安卓模拟器，网络上有很多的安装教程，这里不再赘述。<br/>
这里要注意：需要使用安卓6.0以下的安卓虚拟机。原因是安卓6.0引入了运行时权限管理，使我们的自动化任务变得复杂很多，而且涉及到一些 Root 权限的问题。故推荐使用安卓5.0版本的虚拟机。</p>

<h2 id="toc_1">0x02 安装安卓 SDK</h2>

<p>在MacOS 下，使用命令<code>brew cask install android-sdk</code> 进行安装。<br/>
然后使用 <code>brew cask install homebrew/cask-versions/java8</code>安装 Java8。<br/>
使用 <code>brew cask info android-sdk</code> 查看安卓 SDK 的 path。<br/>
上述步骤完成之后，启动 Genymotion 虚拟机，运行<code>adb devices</code>应该可以看到运行中的虚拟机。</p>

<pre><code class="language-bash">☁  ~  adb devices
List of devices attached
192.168.56.101:5555 device
</code></pre>

<h2 id="toc_2">0x03 安装 &amp; 配置Appium</h2>

<p>前往 <code>https://github.com/appium/appium-desktop/releases/latest</code> 下载最新版本的 Appium。<br/>
点击 Appium，在 ANDROID_HOME 一行中填入安卓 SDK 的 path。JAVA_HOME 实测不用管。<br/>
<img src="media/15508224108794/15508240121683.jpg" alt=""/></p>

<h2 id="toc_3">0x04 运行我们的 Python代码</h2>

<p>这里选择的号池是 fxhyd.cn。有很多的号池可以选择，不需要局限在这一个。</p>

<pre><code class="language-python">import re
import time

import requests
from appium import webdriver

TOKEN = &#39;&#39;


def get_number():
    &quot;&quot;&quot;
    从号池中获取号码
    &quot;&quot;&quot;
    req = requests.get(
        &quot;http://api.fxhyd.cn/UserInterface.aspx?action=getmobile&amp;token=%s&amp;itemid=3988&amp;excludeno=170.171.150&quot; % TOKEN)
    if &#39;success&#39; in req.text:
        return req.text.split(&quot;|&quot;)[-1]


def get_message(phone_number):
    &quot;&quot;&quot;
    获取短信验证码
    &quot;&quot;&quot;
    while True:
        req = requests.get(
            &quot;http://api.fxhyd.cn/UserInterface.aspx?action=getsms&amp;token=%s&amp;itemid=3988&amp;mobile=%s&amp;release=1&quot; % (
                TOKEN, phone_number))
        if &quot;success&quot; not in req.text:
            print(req.text)  # 30001
        else:
            return re.findall(&quot;\\d+&quot;, req.text)[0]
        time.sleep(10)


def release_number(phone_number):
    req = requests.get(
        &quot;http://api.fxhyd.cn/UserInterface.aspx?action=release&amp;token=%s&amp;itemid=3988&amp;mobile=%s,&quot; % (TOKEN, phone_number))
    print(req.text)


def main():
    desired_caps = {}
    desired_caps[&#39;platformName&#39;] = &#39;Android&#39;
    desired_caps[&#39;platformVersion&#39;] = &#39;5.0&#39;
    desired_caps[&#39;deviceName&#39;] = &#39;Android Emulator&#39;
    desired_caps[&#39;appPackage&#39;] = &#39;org.telegram.messenger&#39;
    desired_caps[&#39;appActivity&#39;] = &#39;org.telegram.ui.LaunchActivity&#39;
    desired_caps[&#39;newCommandTimeout&#39;] = 2000000  # Appium默认的超时是60s: 在60s 内没有接到指令的话会重启应用，这里加大这个值
    driver = webdriver.Remote(&#39;http://localhost:4723/wd/hub&#39;, desired_caps)
    driver.find_elements_by_class_name(&quot;android.widget.TextView&quot;)[-1].click()
    try:
        print(driver.page_source)
        country_num, phone_number = driver.find_elements_by_class_name(&quot;android.widget.EditText&quot;)
        for i in range(10):
            driver.keyevent(67)
        number = get_number()
        print(&quot;get number %s&quot; % number)
        phone_number.send_keys(&quot;86%s&quot; % number)
        driver.find_elements_by_class_name(&quot;android.widget.FrameLayout&quot;)[5].click()  # 对勾勾上
        message = get_message(number)
        driver.find_elements_by_class_name(&quot;android.widget.EditText&quot;)[0].send_keys(message)  # 输入验证码
        driver.find_elements_by_class_name(&quot;android.widget.EditText&quot;)[0].send_keys(number)  # 登录界面
        # print(release_number(number))
        driver.find_elements_by_class_name(&quot;android.widget.FrameLayout&quot;)[5].click()  # 对勾勾上
    except Exception as e:
        print(e)
    time.sleep(10)
    driver.quit()


def test_get_release():
    number = get_number()
    print(number)
    release_number(number)


if __name__ == &#39;__main__&#39;:
    main()

</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[全网扫描实战：使用 zmap 和 zgrab2扫描扫描全网]]></title>
    <link href="https://imfht.github.io/15508261134427.html"/>
    <updated>2019-02-22T17:01:53+08:00</updated>
    <id>https://imfht.github.io/15508261134427.html</id>
    <content type="html"><![CDATA[
<p><iframe src="//www.slideshare.net/slideshow/embed_code/key/xiAbvjCL7DTike" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/baidu-xwh/scan-the-whold-internet-and-expolit-all-redis-in-the-world" title="Scan the whold internet and expolit all redis in the world." target="_blank">Scan the whold internet and expolit all redis in the world.</a> </strong> from <strong><a href="//www.slideshare.net/baidu-xwh" target="_blank">baidu-xwh</a></strong> </div></p>

]]></content>
  </entry>
  
</feed>
